name: Release on PR Merge

on:
  pull_request:
    types: [closed]
    branches: [master]
    if: github.event.pull_request.merged == true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  

    - name: Set up Git
      run: |
        git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
        git config --global user.name "${{ secrets.GIT_USER_NAME }}"

    - name: Install git-chglog
      run: |
        wget https://github.com/git-chglog/git-chglog/releases/download/v0.15.1/git-chglog_0.15.1_linux_amd64.tar.gz
        tar xzf git-chglog_0.15.1_linux_amd64.tar.gz
        sudo mv git-chglog /usr/local/bin/

    - name: Get current version and bump
      id: version
      run: |
        VERSION_FILE="VERSION"
        if [ ! -f "$VERSION_FILE" ]; then
          echo "v0.0.1" > $VERSION_FILE
        fi

        CURRENT_VERSION=$(cat $VERSION_FILE)
        echo "Current version: $CURRENT_VERSION"
        
        LABELS=$(jq -r '.pull_request.labels | map(.name) | join(",")' "$GITHUB_EVENT_PATH")
        echo "PR Labels: $LABELS"

        if [[ "$LABELS" == *"major"* ]]; then
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$1++; $2=0; $3=0; print}')
        elif [[ "$LABELS" == *"minor"* ]]; then
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$2++; $3=0; print}')
        else
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$3++; print}')
        fi

        echo "New version: $NEW_VERSION"
        echo $NEW_VERSION > $VERSION_FILE
        git add $VERSION_FILE
        git commit -m "chore: release $NEW_VERSION"
        
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

    - name: Pull latest changes
      run: |
        git fetch origin master
        git merge origin/master

    - name: Push version bump
      run: |
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:master

    - name: Generate Changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          git chglog --next-tag $NEW_VERSION -o CHANGELOG.md
        else
          git chglog $LAST_TAG.. -o CHANGELOG.md
        fi
        cat CHANGELOG.md

    - name: Create tag and release
      run: |
        git tag $NEW_VERSION
        git push origin $NEW_VERSION
        
        gh release create $NEW_VERSION \
          --title "$NEW_VERSION" \
          --notes-file CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
